CCS PCM C Compiler, Version 5.115d, 1               30-ago.-23 09:40
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\12-DC-Infrarrojo-CCS-PIC16F887-877A\Proyecto\PIC16F887\Motor DC + Infrarrojo.lst

               ROM used:   293 words (4%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           21 (6%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0BB
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... Motor DC + Infrarrojo.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Esta práctica consiste en variar la velocidad de un motor por medio de un sensor
.................... SHARP usando los módulos PWM y ADC.
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F887.h>                        //Incluye el microcontrolador con el que se va a trabajar
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  MOVLW  8E
0005:  MOVWF  77
0006:  MOVF   24,W
0007:  MOVWF  78
0008:  MOVF   23,W
0009:  MOVWF  79
000A:  CLRF   7A
000B:  MOVF   78,F
000C:  BTFSS  03.2
000D:  GOTO   018
000E:  MOVF   79,W
000F:  MOVWF  78
0010:  CLRF   79
0011:  MOVLW  08
0012:  SUBWF  77,F
0013:  MOVF   78,F
0014:  BTFSS  03.2
0015:  GOTO   018
0016:  CLRF   77
0017:  GOTO   020
0018:  BCF    03.0
0019:  BTFSC  78.7
001A:  GOTO   01F
001B:  RLF    79,F
001C:  RLF    78,F
001D:  DECF   77,F
001E:  GOTO   018
001F:  BCF    78.7
0020:  BCF    0A.3
0021:  BCF    0A.4
0022:  GOTO   105 (RETURN)
0023:  MOVF   23,W
0024:  BTFSC  03.2
0025:  GOTO   093
0026:  MOVWF  2B
0027:  MOVF   27,W
0028:  BTFSC  03.2
0029:  GOTO   093
002A:  ADDWF  2B,F
002B:  BTFSC  03.0
002C:  GOTO   034
002D:  MOVLW  7F
002E:  SUBWF  2B,F
002F:  BTFSS  03.0
0030:  GOTO   093
0031:  BTFSC  03.2
0032:  GOTO   093
0033:  GOTO   038
0034:  MOVLW  81
0035:  ADDWF  2B,F
0036:  BTFSC  03.0
0037:  GOTO   093
0038:  MOVF   2B,W
0039:  MOVWF  77
003A:  CLRF   78
003B:  CLRF   79
003C:  CLRF   7A
003D:  MOVF   24,W
003E:  MOVWF  2F
003F:  BSF    2F.7
0040:  MOVF   25,W
0041:  MOVWF  2E
0042:  MOVF   26,W
0043:  MOVWF  2D
0044:  MOVLW  18
0045:  MOVWF  2B
0046:  CLRF   2C
0047:  BTFSS  2D.0
0048:  GOTO   061
0049:  MOVF   2A,W
004A:  ADDWF  7A,F
004B:  BTFSS  03.0
004C:  GOTO   053
004D:  INCF   79,F
004E:  BTFSS  03.2
004F:  GOTO   053
0050:  INCF   78,F
0051:  BTFSC  03.2
0052:  BSF    2C.7
0053:  MOVF   29,W
0054:  ADDWF  79,F
0055:  BTFSS  03.0
0056:  GOTO   05A
0057:  INCF   78,F
0058:  BTFSC  03.2
0059:  BSF    2C.7
005A:  MOVF   28,W
005B:  MOVWF  25
005C:  BSF    25.7
005D:  MOVF   25,W
005E:  ADDWF  78,F
005F:  BTFSC  03.0
0060:  BSF    2C.7
0061:  RLF    2C,F
0062:  RRF    78,F
0063:  RRF    79,F
0064:  RRF    7A,F
0065:  RRF    2F,F
0066:  RRF    2E,F
0067:  RRF    2D,F
0068:  BCF    03.0
0069:  DECFSZ 2B,F
006A:  GOTO   046
006B:  MOVLW  01
006C:  ADDWF  77,F
006D:  BTFSC  03.0
006E:  GOTO   093
006F:  BTFSC  78.7
0070:  GOTO   078
0071:  RLF    2F,F
0072:  RLF    7A,F
0073:  RLF    79,F
0074:  RLF    78,F
0075:  DECF   77,F
0076:  BTFSC  03.2
0077:  GOTO   093
0078:  BTFSS  2F.7
0079:  GOTO   089
007A:  INCF   7A,F
007B:  BTFSS  03.2
007C:  GOTO   089
007D:  INCF   79,F
007E:  BTFSS  03.2
007F:  GOTO   089
0080:  INCF   78,F
0081:  BTFSS  03.2
0082:  GOTO   089
0083:  RRF    78,F
0084:  RRF    79,F
0085:  RRF    7A,F
0086:  INCF   77,F
0087:  BTFSC  03.2
0088:  GOTO   093
0089:  MOVF   24,W
008A:  MOVWF  2C
008B:  MOVF   28,W
008C:  XORWF  2C,F
008D:  BTFSS  2C.7
008E:  GOTO   091
008F:  BSF    78.7
0090:  GOTO   097
0091:  BCF    78.7
0092:  GOTO   097
0093:  CLRF   77
0094:  CLRF   78
0095:  CLRF   79
0096:  CLRF   7A
0097:  BCF    0A.3
0098:  BCF    0A.4
0099:  GOTO   116 (RETURN)
009A:  MOVLW  8E
009B:  MOVWF  77
009C:  MOVF   22,W
009D:  SUBWF  77,F
009E:  MOVF   23,W
009F:  MOVWF  79
00A0:  MOVF   24,W
00A1:  MOVWF  78
00A2:  BSF    79.7
00A3:  MOVF   77,F
00A4:  BTFSC  03.2
00A5:  GOTO   0B1
00A6:  BCF    03.0
00A7:  MOVF   79,F
00A8:  BTFSS  03.2
00A9:  GOTO   0AD
00AA:  MOVF   78,F
00AB:  BTFSC  03.2
00AC:  GOTO   0B1
00AD:  RRF    79,F
00AE:  RRF    78,F
00AF:  DECFSZ 77,F
00B0:  GOTO   0A6
00B1:  BTFSS  23.7
00B2:  GOTO   0B8
00B3:  COMF   78,F
00B4:  COMF   79,F
00B5:  INCF   78,F
00B6:  BTFSC  03.2
00B7:  INCF   79,F
00B8:  BCF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   11F (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC = 8                            // Configura el ADC a 8 bits
.................... #use delay( clock = 20Mhz, crystal )       // Tipo de oscilador y frecuencia dependiendo del microcontrolador
.................... 
.................... int VALOR_ADC;                             // Variable para almacenar el valor leído del ADC
.................... 
.................... void main( void ) {
00BB:  MOVF   03,W
00BC:  ANDLW  1F
00BD:  MOVWF  03
00BE:  MOVLW  FF
00BF:  MOVWF  21
00C0:  BSF    03.5
00C1:  BSF    03.6
00C2:  MOVF   09,W
00C3:  ANDLW  C0
00C4:  MOVWF  09
00C5:  BCF    03.6
00C6:  BCF    1F.4
00C7:  BCF    1F.5
00C8:  MOVLW  00
00C9:  BSF    03.6
00CA:  MOVWF  08
00CB:  BCF    03.5
00CC:  CLRF   07
00CD:  CLRF   08
00CE:  CLRF   09
00CF:  BCF    03.7
....................    setup_timer_2( T2_DIV_BY_16, 254, 16 ); // Configura Timer2
00D0:  MOVLW  78
00D1:  MOVWF  78
00D2:  IORLW  06
00D3:  BCF    03.6
00D4:  MOVWF  12
00D5:  MOVLW  FE
00D6:  BSF    03.5
00D7:  MOVWF  12
....................    setup_ccp1( CCP_PWM | CCP_SHUTDOWN_AC_L | CCP_SHUTDOWN_BD_L ); // Configura el módulo CCP para uso del PWM
00D8:  BCF    03.5
00D9:  BCF    21.2
00DA:  MOVF   21,W
00DB:  BSF    03.5
00DC:  MOVWF  07
00DD:  BCF    03.5
00DE:  BCF    07.2
00DF:  MOVLW  0C
00E0:  MOVWF  17
00E1:  BSF    03.5
00E2:  CLRF   1B
00E3:  CLRF   1C
00E4:  MOVLW  01
00E5:  MOVWF  1D
....................    setup_adc_ports( sAN0 );                // Configura solo el puerto A0 como entrada analógica
00E6:  BSF    03.6
00E7:  MOVF   09,W
00E8:  ANDLW  C0
00E9:  MOVWF  09
00EA:  BCF    03.6
00EB:  BCF    1F.4
00EC:  BCF    1F.5
00ED:  MOVLW  01
00EE:  BSF    03.6
00EF:  MOVWF  08
....................    setup_adc( ADC_CLOCK_DIV_8 );           // Configura oscilador para la conversión
00F0:  BCF    03.5
00F1:  BCF    03.6
00F2:  BSF    1F.6
00F3:  BCF    1F.7
00F4:  BSF    03.5
00F5:  BCF    1F.7
00F6:  BCF    03.5
00F7:  BSF    1F.0
.................... 
....................    while ( 1 ) {
....................       set_adc_channel( 0 );                // Selecciona el canal 0 para la conversión
00F8:  MOVLW  00
00F9:  MOVWF  78
00FA:  MOVF   1F,W
00FB:  ANDLW  C3
00FC:  IORWF  78,W
00FD:  MOVWF  1F
....................       VALOR_ADC = read_adc() * 1.53;       // Lee el valor del ADC y lo guarda en la variable
00FE:  BSF    1F.1
00FF:  BTFSC  1F.1
0100:  GOTO   0FF
0101:  CLRF   24
0102:  MOVF   1E,W
0103:  MOVWF  23
0104:  GOTO   004
0105:  MOVF   7A,W
0106:  MOVWF  26
0107:  MOVF   79,W
0108:  MOVWF  25
0109:  MOVF   78,W
010A:  MOVWF  24
010B:  MOVF   77,W
010C:  MOVWF  23
010D:  MOVLW  0A
010E:  MOVWF  2A
010F:  MOVLW  D7
0110:  MOVWF  29
0111:  MOVLW  43
0112:  MOVWF  28
0113:  MOVLW  7F
0114:  MOVWF  27
0115:  GOTO   023
0116:  MOVF   7A,W
0117:  MOVWF  25
0118:  MOVF   79,W
0119:  MOVWF  24
011A:  MOVF   78,W
011B:  MOVWF  23
011C:  MOVF   77,W
011D:  MOVWF  22
011E:  GOTO   09A
011F:  MOVF   78,W
0120:  MOVWF  20
....................       set_pwm1_duty( VALOR_ADC );
0121:  MOVF   20,W
0122:  MOVWF  15
0123:  GOTO   0F8
....................    }
.................... }
0124:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
